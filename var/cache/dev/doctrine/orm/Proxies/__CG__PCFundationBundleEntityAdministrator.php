<?php

namespace Proxies\__CG__\PC\FundationBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Administrator extends \PC\FundationBundle\Entity\Administrator implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'donatives', 'meetings', 'events', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'id', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'name', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'lastName', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'age', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'email', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'password'];
        }

        return ['__isInitialized__', 'donatives', 'meetings', 'events', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'id', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'name', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'lastName', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'age', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'email', '' . "\0" . 'PC\\FundationBundle\\Entity\\Administrator' . "\0" . 'password'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Administrator $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName($lastName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', [$lastName]);

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', []);

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAge($age)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAge', [$age]);

        return parent::setAge($age);
    }

    /**
     * {@inheritDoc}
     */
    public function getAge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAge', []);

        return parent::getAge();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function addDonative(\PC\FundationBundle\Entity\Donative $donative)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDonative', [$donative]);

        return parent::addDonative($donative);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDonative(\PC\FundationBundle\Entity\Donative $donative)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDonative', [$donative]);

        return parent::removeDonative($donative);
    }

    /**
     * {@inheritDoc}
     */
    public function getDonatives()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDonatives', []);

        return parent::getDonatives();
    }

    /**
     * {@inheritDoc}
     */
    public function addMeeting(\PC\FundationBundle\Entity\Meeting $meeting)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMeeting', [$meeting]);

        return parent::addMeeting($meeting);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMeeting(\PC\FundationBundle\Entity\Meeting $meeting)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMeeting', [$meeting]);

        return parent::removeMeeting($meeting);
    }

    /**
     * {@inheritDoc}
     */
    public function getMeetings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeetings', []);

        return parent::getMeetings();
    }

}
